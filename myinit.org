#+STARTUP: fold
* Emacs Configuration
** Emacs General Configuration
*** Interface Adjustments
- Hide tool bar, hide menu bar, hide scrollbars, turn on show-paren-mode,
  turn off bell.
  #+begin_src emacs-lisp
    (setq inhibit-startup-message t)
    (tool-bar-mode 0)
    (menu-bar-mode 0)
    (scroll-bar-mode 0)
    (show-paren-mode 1)
    (set-fringe-mode 10)
    (setq ring-bell-function #'ignore)
  #+end_src
- Simplify emacs prompting for yes or no.
  #+begin_src emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
  #+end_src
- Set the tab width and fill column length
  #+begin_src emacs-lisp
    (setq-default fill-column 72 tab-width 4)
  #+end_src
*** Customize file location
- Set up a custom-file reserved strictly for customizations recorded by Customize.
  #+begin_src emacs-lisp
    (setq custom-file "~/.emacs-custom.el")
    (load custom-file)
  #+end_src
*** Auto-save and Backup Files
- Create new auto-save and backup directories if necessary.
  #+begin_src emacs-lisp
    (make-directory "~/.emacs.d/autosave/" t)
    (make-directory "~/.emacs.d/backups/" t)
  #+end_src
- Configure emacs to use the backups and autosave directories.
  #+begin_src emacs-lisp
    (setq backup-directory-alist '((".*" . "~/.emacs.d/backups/")))
    (defvar autosave-dir (expand-file-name "~/.emacs.d/autosave/"))
    (setq auto-save-list-file-prefix autosave-dir)
    (setq auto-save-file-name-transforms `((".*" ,autosave-dir t)))
  #+end_src
*** Global autorevert mode
- Have buffers auto-revert when files change on disk.
  #+begin_src emacs-lisp
    (global-auto-revert-mode 1)
  #+end_src
*** UTF-8
- Configure for utf-8.
  #+begin_src emacs-lisp
    (prefer-coding-system 'utf-8)
    (set-language-environment "UTF-8")
  #+end_src
*** Uniquify
- The library uniquify overrides Emacs default mechanism for making
  buffer names (using suffixes like <2>, <3> etc.) unique and
  thereby making names more distinguishable.
  #+begin_src emacs-lisp
    (require 'uniquify)
    (setq uniquify-buffer-name-style 'forward)
  #+end_src
*** Auto-Compile
- This package provides two minor modes which automatically compile
  Emacs lisp source files. Together these modes guarantee that Emacs never
  loads outdated byte code files.
  #+begin_src emacs-lisp
    (use-package auto-compile :straight t)
      ;;; init.el --- user init file
    (setq load-prefer-newer t)
    (add-to-list 'load-path "~/.emacs.d/straight/repos/packed")
    (add-to-list 'load-path "~/.emacs.d/straight/repos/auto-compile")
    (require 'auto-compile)
    (auto-compile-on-load-mode) (auto-compile-on-save-mode)
  #+end_src
*** Cups printing
- Set gtklp as the command for lpr.
  #+begin_src emacs-lisp
    (setq lpr-command "gtklp")
    (setq ps-lpr-command "gtklp")
  #+end_src
*** Prefer newer Bytecode
- Quite simple trick to avoid a few bugs that might arise from older
  bytecode being used, even though the elisp file has changed.
#+begin_src emacs-lisp
  (setq load-prefer-newer t)
#+end_src
*** Help Buffers
- Usually when using Emacs' online-help system, it doesn't move the
  active point to the new buffer, making me type C-x o every time
  (nearly as an instinct). Telling Emacs to do otherwise, should make
  life a bit easier.
#+begin_src emacs-lisp
  (setq help-window-select t)
#+end_src
*** Recent Files
- For tools like projectile, recentf is enabled, so to easily access
  recently opened files.
#+begin_src emacs-lisp
  (recentf-mode t)
  (setq recentf-save-file "~/.emacs.d/recentf"
        recentf-max-saved-items 50)
#+end_src
*** Save-place Package
- Save-place is a package to save the location of the point when you kill a buffer and later return
  to it.
  #+begin_src emacs-lisp
(use-package saveplace :straight t
  :init (save-place-mode 1))
(setq save-place-file "~/.emacs.d/saveplace")
  #+end_src
*** w3m and External Browsing
- I like to use w3m inside Emacs.
  #+begin_src emacs-lisp
    (use-package w3m
      :straight t
      :config
      (setq browse-url-browser-function 'w3m-browse-url))

    (defun wicked/w3m-open-current-page-in-firefox ()
      "Open the current URL in Mozilla Firefox."
      (interactive)
      (browse-url-firefox w3m-current-url))

    (defun wicked/w3m-open-link-or-image-in-firefox ()
      "Open the current link or image in Firefox."
      (interactive)
      (browse-url-firefox (or (w3m-anchor)
                                (w3m-image))))
    (with-eval-after-load 'w3m
      (progn
        (define-key w3m-mode-map "f" 'wicked/w3m-open-current-page-in-firefox)
        (define-key w3m-mode-map "F" 'wicked/w3m-open-link-or-image-in-firefox)))
  #+end_src
*** Adjust keystroke echo timeout
- Adjusts keystroke echo timeout from 1s to 0.5s.
  #+begin_src emacs-lisp
      (setq echo-keystrokes 0.5)
  #+end_src
*** Indent with spaces by default
- Since most programming languages prefer spaces over tabs.
  #+begin_src emacs-lisp
    (setq-default indent-tabs-mode nil)
  #+end_src
*** Display buffer name in frame titles.
- Emacs defaults to displaying invocation name and host.
  The code below displays the buffer name instead in the frame title.
  #+begin_src emacs-lisp
    (setq frame-title-format
          '("" invocation-name ": " (:eval (replace-regexp-in-string
                                            "^ +" "" (buffer-name)))))
  #+end_src
*** Display fringe indicators
- Adds fringe indicators to word boundaries.
  #+begin_src emacs-lisp
    (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
  #+end_src
*** Enable disabled commands
#+begin_src emacs-lisp
  (setq disabled-command-function nil)
#+end_src
*** Don't use dialog boxes
- Clicking on an install button for instance makes Emacs
  spawn dialog boxes from that point on.
   #+begin_src emacs-lisp
     (setq use-dialog-box nil)
   #+end_src
*** savehist
- The history of prompts like M-: can be saved, but let's change its
  save file and history length first.
  #+begin_src emacs-lisp
    (setq savehist-file "~/.emacs.d/savehist"
          history-length 150)
  #+end_src
*** Fix oh-my-zsh eterm color issue
#+begin_src emacs-lisp
(setq system-uses-terminfo nil)
#+end_src
*** Set websters 1913 dictionary server
#+begin_src emacs-lisp
(setq dictionary-server "dict.org")
#+end_src
** Theme/Mode Line
*** Emacs Colour Theme
- I prefer a dark colour theme.
  #+begin_src emacs-lisp
    ;; (straight-use-package 'color-theme-modern)
    ;; (load-theme 'midnight t t)
    ;; (enable-theme 'midnight)
(straight-use-package 'dracula-theme)
(load-theme 'dracula t)
  #+end_src
*** Powerline package for mode line
- Customize mode line with powerline theme.
  #+begin_src emacs-lisp
    (use-package powerline
      :straight t
      :config
      (require 'powerline)
      (powerline-center-theme))
  #+end_src
** Useful Packages and functions
*** Ivy-rich package
- ivy-rich comes with rich transformers for commands from ivy and counsel.
#+begin_src emacs-lisp
;; (use-package ivy-rich :straight t
;;   :after (ivy)
;;   :config
;;   (require 'ivy-rich)
;;   (ivy-rich-mode 1))
#+end_src
*** Vertico package
#+begin_src emacs-lisp
;; Enable vertico
(use-package vertico
  :straight t
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)
  )

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :straight t
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :straight t
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
#+end_src
*** Orderless package
#+begin_src emacs-lisp
;; Optionally use the `orderless' completion style.
(use-package orderless
  :straight t
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src
*** Consult package
#+begin_src emacs-lisp
;; Example configuration for Consult
(use-package consult
  :straight t
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s m" . consult-multi-occur)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-."))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key (kbd "M-.")
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both c and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; (kbd "C-+")

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;; There are multiple reasonable alternatives to chose from.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 3. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 4. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
)
#+end_src
*** Marginalia package
#+begin_src emacs-lisp
;; Enable rich annotations using the Marginalia package
(use-package marginalia
  :straight t
  ;; Either bind `marginalia-cycle' globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init configuration is always executed (Not lazy!)
  :init

  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode))
#+end_src
*** Corfu package
#+begin_src emacs-lisp
(use-package corfu
  :straight t
  ;; Optional customizations
  ;; :custom
  ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  ;; (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; Enable Corfu only for certain modes.
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since Dabbrev can be used globally (M-/).
  ;; See also `corfu-excluded-modes'.
  :init
  (global-corfu-mode))
#+end_src
*** Embark package
#+begin_src emacs-lisp
(use-package embark
  :straight t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :straight t ; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
*** Consult LSP
#+begin_src emacs-lisp
(use-package consult-lsp
  :straight t)
#+end_src
*** Amx mode
- Amx is an alternative interface for M-x in Emacs.
  #+begin_src emacs-lisp
    (use-package amx :straight t)
  #+end_src
*** Counsel package
- Counsel provides various completion functions for ivy and swiper.
  #+begin_src emacs-lisp
    ;; (use-package counsel :straight t)
  #+end_src
*** Swiper package
- A generic completion method for emacs.
  #+begin_src emacs-lisp
;; (use-package swiper :straight t)
;; (ivy-mode)
;; (setq ivy-use-virtual-buffers t)
;; (setq enable-recursive-minibuffers t)
;; (global-set-key "\C-s" 'swiper)
;; (global-set-key (kbd "C-c C-r") 'ivy-resume)
;; (global-set-key (kbd "<f6>") 'ivy-resume)
;; (global-set-key (kbd "M-x") 'counsel-M-x)
;; ;;(global-set-key (kbd "M-x") 'amx)
;; (global-set-key (kbd "C-x C-f") 'counsel-find-file)
;; (global-set-key (kbd "<f1> f") 'counsel-describe-function)
;; (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
;; (global-set-key (kbd "<f1> l") 'counsel-load-library)
;; (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
;; (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
;; (global-set-key (kbd "C-c g") 'counsel-git)
;; (global-set-key (kbd "C-c j") 'counsel-git-grep)
;; (global-set-key (kbd "C-c k") 'counsel-ag)
;; (global-set-key (kbd "C-x l") 'counsel-locate)
;; (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
;; (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
  #+end_src
*** Calfw Package
- Calendar framework for Emacs.
  #+begin_src emacs-lisp
(use-package calfw
  :straight t
  :config
  (require 'calfw))
(use-package calfw-org
  :straight t
  :config
  (require 'calfw-org))
  #+end_src
*** Lorem Ipsum
- Add filler lorem ipsum text to Emacs.
  #+begin_src emacs-lisp
    (straight-use-package 'lorem-ipsum)
    (require 'lorem-ipsum)
    (global-set-key (kbd "C-c C-i s") 'lorem-ipsum-insert-sentences)
    (global-set-key (kbd "C-c C-i p") 'lorem-ipsum-insert-paragraphs)
    (global-set-key (kbd "C-c C-i l") 'lorem-ipsum-insert-list)
  #+end_src
*** Rainbow delimiters
- Rainbow delimiters is a "rainbow parentheses"-like mode which highlights
  parentheses, brackets or braces according to their depth.
  #+begin_src emacs-lisp
    (straight-use-package 'rainbow-delimiters)
    (require 'rainbow-delimiters)
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  #+end_src
*** Rainbow mode
- Every time emacs encounters a hexadecimal code that resembles a
  color, it will automatically highlight it in the appropriate
  color.
  #+begin_src emacs-lisp
    (use-package rainbow-mode
      :straight t
      :init
      (add-hook 'prog-mode-hook 'rainbow-mode))
  #+end_src
*** Define Word Package
- Lets you find the definition of a word.
  #+begin_src emacs-lisp
    (use-package define-word
           :straight t
           :defer t
           :bind (("C-c d" . define-word-at-point)
                 ("C-c D" . define-word))
           :config
           (setq define-word-default-service 'webster))
    ;;(global-set-key (kbd "C-c d") 'define-word-at-point)
    ;;(global-set-key (kbd "C-c D") 'define-word)
  #+end_src
*** Fuzzy Search
- An Emacs frontend fof fzf.
  #+begin_src emacs-lisp
    (use-package fzf :straight t)
  #+end_src
*** Zsh function
- A little function to a zsh in ansi-term.
  #+begin_src emacs-lisp
    (defun my-zsh ()
      (interactive)
      (ansi-term "zsh"))
  #+end_src
*** Highlight indent guides package
- Emacs minor mode to highlight indentation.
  #+begin_src emacs-lisp
    (straight-use-package 'highlight-indent-guides)
    (setq highlight-indent-guides-method 'column)
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
  #+end_src
*** PowerThesaurus
#+begin_src emacs-lisp
(use-package powerthesaurus
  :straight t)
#+end_src
*** Hyperbole
#+begin_src emacs-lisp
(use-package hyperbole
  :straight t
  :config
  (setq hbmap:dir-user "~/gtd/hyperbole/")
  (setq hyrolo-file-list '("~/gtd/hyperbole/ideas.org"))
  (setq hyrolo-date-format "%Y-%m-%d %H:%M:%S"))
#+end_src
*** Inform package
#+begin_src emacs-lisp
(use-package inform
  :straight t
  :config
  (require 'inform))
#+end_src

** Keybindings
*** Which key package
- This package displays the key bindings following your currently
  entered incomplete command (a prefix) in a popup.
  #+begin_src emacs-lisp
    (use-package which-key
      :straight t
      :config
      (require 'which-key)
      (which-key-mode)  )
  #+end_src
*** Revert buffer f5 keybinding
- Set keybinding for revert-buffer.
  #+begin_src emacs-lisp
    (global-set-key (kbd "<f5>") 'revert-buffer)
  #+end_src
*** Visit emacs configuration file C-c e keybinding
- Quick keybinding to edit ~/.emacs.d/myinit.org with C-c e keybinding.
  #+begin_src emacs-lisp
    (defun config-visit ()
      (interactive)
      (find-file "~/.emacs.d/myinit.org"))
    (global-set-key (kbd "C-c e") 'config-visit)
  #+end_src
*** Reload Configuration file C-c r
- Reloads ~/.emacs.d/myinit.org with C-c r keybinding.
  #+begin_src emacs-lisp
     (defun config-reload ()
       "Reloads ~/.emacs.d/myinit.org at runtime"
       (interactive)
       (org-babel-load-file (expand-file-name "~/.emacs.d/myinit.org")))
    (global-set-key (kbd "C-c r") 'config-reload)
  #+end_src
*** Find other file with meta-o keybinding
- Use this keybinding to go to header files in c/c++.
  #+begin_src emacs-lisp
         (defvar my-cpp-other-file-alist
           '(("\\.cpp\\'" (".hpp" ".ipp"))
             ("\\.ipp\\'" (".hpp" ".cpp"))
             ("\\.hpp\\'" (".ipp" ".cpp"))
             ("\\.cxx\\'" (".hxx" ".ixx"))
             ("\\.ixx\\'" (".cxx" ".hxx"))
             ("\\.hxx\\'" (".ixx" ".cxx"))
             ("\\.c\\'" (".h"))
             ("\\.h\\'" (".c"))
             ))

    (setq-default ff-other-file-alist 'my-cpp-other-file-alist)
    (add-hook
         'c-mode-hook
          (lambda ()
          (local-set-key (kbd "M-o") #'ff-find-other-file)))

  #+end_src
*** Hydra Package
- This is a package for GNU Emacs that can be used to tie related
  commands into a family of short bindings with a common prefix - a Hydra.
  #+begin_src emacs-lisp
    (use-package hydra :straight t)
  #+end_src
*** Ibuffer Keybinding
- Ibuffer ([[https://www.emacswiki.org/emacs/IbufferMode][Ibuffer mode]]) is an advanced replacement for BufferMenu, which lets
  you operate on buffers much in the same manner as Dired. Set the keybinding
  and the rest of the configuration below sorts buffers nicely.
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-x C-b") 'ibuffer)
    (setq ibuffer-saved-filter-groups
          (quote (("default"
                   ("dired" (mode . dired-mode))
                   ("org" (name . "^.*org$"))

                   ("web" (or (mode . web-mode) (mode . js2-mode)))
                   ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
                   ("mu4e" (name . "\*mu4e\*"))
                   ("programming" (or
                                   (mode . python-mode)
                                   (mode . c++-mode)))
                   ("emacs" (or
                             (name . "^\\*scratch\\*$")
                             (name . "^\\*Messages\\*$")))
                   ))))
    (add-hook 'ibuffer-mode-hook
              (lambda ()
                (ibuffer-auto-mode 1)
                (ibuffer-switch-to-saved-filter-groups "default")))

    ;; don't show these
    ;;(add-to-list 'ibuffer-never-show-predicates "zowie")
    ;; Don't show filter groups if there are no buffers in that group
    (setq ibuffer-show-empty-filter-groups nil)

    ;; Don't ask for confirmation to delete marked buffers
    (setq ibuffer-expert t)
  #+end_src
*** Switch Default  Search Keybindings
- Swap search keybindings for regular expression aware ones. I have
  this disabled in my configuration at the moment.
  #+begin_src emacs-lisp
    ;;(global-set-key (kbd "C-s") 'isearch-forward-regexp)
    ;;(global-set-key (kbd "C-r") 'isearch-backward-regexp)
    ;;(global-set-key (kbd "C-M-s") 'isearch-forward)
    ;;(global-set-key (kbd "C-M-r") 'isearch-backward)
  #+end_src
*** Helpful package
#+begin_src emacs-lisp
(use-package helpful :straight t
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src
** IRC
*** ZNC Package
- ZNC package that allows emacs to talk to znc irc server.
  #+begin_src emacs-lisp
    (straight-use-package 'znc)
  #+end_src
*** ERC Customization
- Set up ERC.
  #+begin_src emacs-lisp
    (use-package erc
      :straight t
      :config
      (add-to-list 'erc-modules 'notifications)
      (add-to-list 'erc-modules 'spelling)
      (require 'erc-desktop-notifications)
      (erc-update-modules))

    ;; Make ERC client hide chat JOINS/PARTS/QUITS
    (setq erc-hide-list '("JOIN" "MODE" "NICK" "PART" "QUIT"
                          "324" "329" "332" "333" "353" "477"))

    ;; Use erc-fill to make for more visually pleasing display
    (setq erc-fill-function 'erc-fill-static)
    (setq erc-fill-static-center 15)


    ;; Set ERC client to ignore server messages
    (setq erc-server-303-functions nil)

    ;; Change prompt for each channel buffer to match the channel name.
    (setq erc-prompt (lambda () (concat "[" (buffer-name) "]")))

    ;; Add package erc-scrolltoplace
    (straight-use-package 'erc-scrolltoplace)
    (require 'erc-scrolltoplace)
    (add-to-list 'erc-modules 'scrolltoplace)
    (erc-update-modules)

    ;; Receive a notificatiion when getting a private message/nickname mentioned.
    (defun my/erc-notify (nickname message)
      "Displays a notification message for ERC."
      (let* ((channel (buffer-name))
             (nick (erc-hl-nicks-trim-irc-nick nickname))
             (title (if (string-match-p (concat "^" nickname) channel)
                        nick
                      (concat nick " (" channel ")")))
             (msg (s-trim (s-collapse-whitespace message))))
        (alert (concat nick ": " msg) :title title)))
  #+end_src
*** ERC-hl-nicks package
- Package to make emacs irc client to highlight nicknames.
  #+begin_src emacs-lisp
    (use-package erc-hl-nicks
      :straight t)
  #+end_src
** Org mode
*** Org General Configuration
- This section configures org mode for my needs.
  #+begin_src emacs-lisp
(require 'org-id)
(setq org-id-link-to-org-use-id 'create-if-interactive)
(setq org-habit-show-all-today t)
(setq org-agenda-start-with-log-mode t)
(setq org-log-done 'time)
(setq org-log-into-drawer t)
(setq org-agenda-start-on-weekday 0)
;;(setq org-log-repeat nil)
(setq org-log-reschedule 'time)
;;(setq org-todo-repeat-to-state "REPEAT")


(setq org-agenda-files (list "~/gtd/tasks.org"
                             "~/gtd/habits.org"
                             "~/gtd/goals.org"
                             "~/gtd/birthdays.org"))

(setq org-refile-targets '((nil :maxlevel . 9)
                           (org-agenda-files :maxlevel . 3)
                           (org-buffer-list :maxlevel . 2)))

;; Save Org buffers after refiling!
(advice-add 'org-refile :after 'org-save-all-org-buffers)

;; Refile in a single go
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-use-outline-path 'file)
(setq org-refile-allow-creating-parent-nodes 'confirm)

;; other useful settings
(setq org-clock-into-drawer "CLOCKING")
(setq org-export-with-smart-quotes t)
(setq org-src-fontify-natively t)
(setq org-src-window-setup 'current-window)
(add-hook 'org-mode-hook 'org-indent-mode)
(setq org-confirm-babel-evaluate nil)

(setq org-startup-indented t
      org-cycle-include-plain-lists 'integrate
      org-return-follows-link t
      org-src-fontify-natively t
      org-src-preserve-indentation t
      org-enforce-todo-dependencies t
      org-track-ordered-property-with-tag t
      org-agenda-dim-blocked-tasks t
      org-enforce-todo-checkbox-dependencies t
      org-attach-use-inheritance t
      org-use-property-inheritance t
      org-link-frame-setup '((file . find-file)))

(setq org-agenda-include-diary t
      diary-display-function #'diary-fancy-display)
     (add-hook 'diary-list-entries-hook #'diary-include-other-diary-files)
     (add-hook 'diary-list-entries-hook #'diary-sort-entries t)

(setq org-export-backends '(ascii beamer html latex md))

(require 'org-habit)
(add-to-list 'org-modules 'org-habit)
(setq org-habit-graph-column 60)

(setq org-clock-sound t) ;; Standard Emacs beep
(setq org-clock-sound "~/sounds/Smallbell.wav") ;; Play this sound file, fall back to beep
(add-to-list 'org-emphasis-alist
             '("*" (:foreground "green")
               ))
(add-hook 'org-mode-hook 'org-cdlatex-mode)
  #+end_src
*** Configure org contrib
#+begin src emacs-lisp
(straight-use-package 'org-contrib)
#+end_src
*** Org-ellipsis
#+begin_src emacs-lisp
(setq org-ellipsis " ▼")
#+end_src
*** Open Org agenda on startup
- Automatically open org agenda on startup.
  #+begin_src emacs-lisp
;;(org-agenda nil "a")
(add-hook 'after-init-hook 'org-agenda-list)
  #+end_src
*** Org-agenda-list-current-buffer function
#+begin_src emacs-lisp
(defun my/org-agenda-list-current-buffer ()
  (interactive)
  (let ((org-agenda-files (list (buffer-file-name (current-buffer)))))
      (call-interactively #'org-agenda)))
#+end_src
*** Org mode Keybindings
- The default keybindings for org-mode agenda, storing a link, and org capture.
  #+begin_src emacs-lisp
    (global-set-key "\C-cl" 'org-store-link)
    (global-set-key "\C-ca" 'org-agenda)
    (global-set-key "\C-cc" 'org-capture)
    (global-set-key "\C-cb" 'org-switchb)
    (global-set-key (kbd "<f11>") 'org-clock-goto)
    (global-set-key (kbd "C-<f11>") 'org-clock-in)
    (global-set-key (kbd "M-<f11>") 'org-clock-out)
  #+end_src
*** Org-superstar-mode (org bullet mode)
- This mode replaces org stars with fancier bullets.
  #+begin_src emacs-lisp
    (straight-use-package 'org-superstar)
    (require 'org-superstar)
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
    (org-superstar-configure-like-org-bullets)
  #+end_src
*** Org TODO Keywords
- Setup org TODO keywords.
  #+begin_src emacs-lisp
;; org TODO Keywords
(setq org-todo-keywords
    '((sequence "REPEAT(r)" "NEXT(n@/!)" "TODO(t@/!)" "WAITING(w@/!)" "SOMEDAY(s@/!)" "PROJ(p)" "|" "DONE(d@)" "CANCELLED(c@)")))

    (setq org-todo-keyword-faces
          (quote (("TODO" :foreground "red" :weight bold)
                  ("NEXT" :foreground "#00ffff" :weight bold)
                  ("REPEAT" :foreground "magenta" :weight bold)
                  ("WAITING" :foreground "orange" :weight bold)
                  ("SOMEDAY" :foreground "cyan" :weight bold)
                  ("PROJ" :foreground "#ffc252" :weight bold)
                  ("DONE" :foreground "green" :weight bold)
                  ("CANCELLED" :foreground "yellow" :weight bold))))

(setq org-tag-alist
    '((:startgroup)
       ; Put mutually exclusive tags here
       (:endgroup)
       ("@errand" . ?E)
       ("@home" . ?H)
       ("@work" . ?W)
       ("agenda" . ?a)
       ("planning" . ?p)
       ("publish" . ?P)
       ("batch" . ?b)
       ("note" . ?n)
       ("idea" . ?i)))

;; Configure custom agenda views
  (setq org-agenda-custom-commands
   '(("d" "Dashboard"
     ((agenda "" ((org-deadline-warning-days 7)))
      (todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))
      (tags-todo "ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

    ("n" "Next Tasks"
     ((todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))))

    ("W" "Work Tasks" tags-todo "+work-email")

    ;; Low-effort next actions
    ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
     ((org-agenda-overriding-header "Low Effort Tasks")
      (org-agenda-max-todos 20)
      (org-agenda-files org-agenda-files)))

    ("w" "Workflow Status"
     ((todo "WAITING"
            ((org-agenda-overriding-header "Waiting on External")
             (org-agenda-files org-agenda-files)))
      (todo "TODO"
            ((org-agenda-overriding-header "TODO")
             (org-agenda-files org-agenda-files)))
      (todo "SOMEDAY"
            ((org-agenda-overriding-header "Someday")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "PROJ"
            ((org-agenda-overriding-header "Project Backlog")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "NEXT"
            ((org-agenda-overriding-header "Ready for Action")
             (org-agenda-files org-agenda-files)))
      (tags-todo  "ACTIVE"
            ((org-agenda-overriding-header "Active Projects")
             (org-agenda-files org-agenda-files)))
      (todo "DONE"
            ((org-agenda-overriding-header "Completed Items")
             (org-agenda-files org-agenda-files)))
      (todo "CANCELLED"
            ((org-agenda-overriding-header "Cancelled Projects")
             (org-agenda-files org-agenda-files)))))))

  #+end_src
*** Org Mode Latex Preview
- Preview pdf's with dvipng.
  #+begin_src emacs-lisp
    (setq org-latex-create-formula-image-program 'dvipng)
  #+end_src
*** Catch Invisible Edits
- Prevent invisible edits in org mode.
  #+begin_src emacs-lisp
    (setq org-catch-invisible-edits 'show-and-error)
  #+end_src
*** Get Org Mode To Use Alphabetical Lists
- Configure org to use alphabetical lists.
  #+begin_src emacs-lisp
    (setq org-alphabetical-lists t)
  #+end_src
*** Structure Templates
#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src
*** Org babel evaluation setup
- Configure orb babel for programming languages.
  #+begin_src emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t) (python . t) (js . t) (ruby . t)))
(setq org-config-babel-evaluate nil)
  #+end_src
*** Ox-reveal for presentations
- Let's org use reveal.js for creating and exporting presentations.
  #+begin_src emacs-lisp
    (straight-use-package 'org-re-reveal)
    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
    (setq org-reveal-mathjax t)
  #+end_src
*** Org Capture
- Some useful org capture templates.
  #+begin_src emacs-lisp
    (setq org-default-notes-file "~/gtd/notes.org")
    (setq org-capture-templates
          '(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/gtd/tasks.org" "Inbox")
             (file "~/gtd/tpl-todo.txt"))
            ("d" "Daily Plan")
            ("dp" "Plan" entry (file+olp+datetree "~/gtd/dailyplan.org")
             (file "~/gtd/tpl-dailyplan.txt"))
            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/gtd/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
           ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
            ("n" "Notes")
            ("nn" "Notes" entry (file+headline "~/gtd/notes.org" "Notes")
             "* %?   \n  %i\n  %u\n  %a")
            ("l" "Link")
            ("ll" "Link" entry(file+headline "~/gtd/links.org" "Links")
             "* %? %^L %^g \n%T" :prepend t)
            ("g" "Goals")
            ("gg" "Goal" entry (file+headline "~/gtd/goals.org" "Goals") (file "~/gtd/tpl-goal.org"))
            ("p" "Projects")
            ("pp" "Project" entry (file+headline "~/gtd/tasks.org" "Projects")(file "~/gtd/tpl-projects.txt"))
            ("b" "Books")
            ("bb" "Add book to read" entry (file+headline "~/gtd/tasks.org" "Books to read") (file "~/gtd/tpl-book.txt") :empty-lines-after 2)
            ("s" "Someday")
            ("ss" "Someday" entry (file+headline "~/gtd/tasks.org" "Someday") "* %i%? \n %U")
            ("w" "Waiting")
            ("ww" "Waiting" entry (file+headline "~/gtd/tasks.org" "Waiting") (file "~/gtd/tpl-waiting.txt"))
            ))
  #+end_src
*** Org split-line behaviour on M-RET
- Set the behaviour of org split-line.
  #+begin_src emacs-lisp
    (setq org-M-RET-may-split-line nil)
  #+end_src
*** Org Hydra for Clocking
- This is a hydra to make org mode clocking easier.
- Taken from here http://mbork.pl/2018-03-18_My_Org-mode_hydra
  #+begin_src emacs-lisp
    (defhydra hydra-org (:color blue :timeout 12 :columns 4)
      "Org commands"
      ("i" (lambda () (interactive) (org-clock-in '(4))) "Clock in")
      ("o" org-clock-out "Clock out")
      ("q" org-clock-cancel "Cancel a clock")
      ("<f10>" org-clock-in-last "Clock in the last task")
      ("j" (lambda () (interactive) (org-clock-goto '(4))) "Go to a clock"))
    (global-set-key (kbd "<f10>") 'hydra-org/body)
  #+end_src
*** Org Twitter Bootstrap package
- Include the bootstrap package for exporting.
  #+begin_src emacs-lisp
    (straight-use-package 'ox-twbs)
  #+end_src
*** Org-cliplink
- A simple command that takes a URL from the clipboard and inserts an org-mode
  link with a title of a page found by the URL into the current buffer.
  #+begin_src emacs-lisp
    (straight-use-package 'org-cliplink)
    (global-set-key (kbd "C-x p i") 'org-cliplink)
  #+end_src
*** Create an ID and copy the UUID to the clipboard
#+begin_src emacs-lisp
(defun my/copy-idlink-to-clipboard() "Copy an ID link with the
headline to killring, if no ID is there then create a new unique
ID. This function works only in org-mode or org-agenda buffers.
The purpose of this function is to easily construct id:-links to
org-mode items. If its assigned to a key it saves you marking the
text and copying to the killring."
(interactive)
(when (eq major-mode 'org-agenda-mode)
(org-agenda-show)
(org-agenda-goto))
(when (eq major-mode 'org-mode) ; do this only in org-mode buffers
(setq mytmphead (nth 4 (org-heading-components)))
(setq mytmpid (funcall 'org-id-get-create))
(setq mytmplink (format "[[id:%s][%s]]" mytmpid mytmphead))
(kill-new mytmplink)
(message "Copied %s to killring (clipboard)" mytmplink)
))
(global-set-key (kbd "<f6>") 'my/copy-idlink-to-clipboard)
#+end_src
*** Clear checkboxes when repeating task marked done
#+begin_src emacs-lisp
(defun org-reset-checkbox-state-maybe ()
"Reset all checkboxes in an entry
if the `RESET_CHECK_BOXES' property is set"
(interactive "∗")
(if (org-entry-get (point) "RESET_CHECK_BOXES")
    (org-reset-checkbox-state-subtree)))

(defun org-checklist ()
  (when (member org-state org-done-keywords)
    (org-reset-checkbox-state-maybe)))

(defun my-clockfiles ()
  (append org-agenda-files
          (file-expand-wildcards "~/gtd/track∗.org")))

(add-hook 'org-after-todo-state-change-hook 'org-checklist)
#+end_src
*** Org-roam
#+begin_src emacs-lisp
(use-package emacsql-sqlite3
  :straight t
  :config
  (require 'emacsql-sqlite3))


(use-package org-roam
  :straight t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/RoamNotes")
  (org-roam-completion-everywhere t)
  (org-roam-dailies-capture-templates
    '(("d" "default" entry "* %<%I:%M %p>: %?"
       :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         :map org-mode-map
         ("C-M-i" . completion-at-point)
         :map org-roam-dailies-map
         ("Y" . org-roam-dailies-capture-yesterday)
         ("T" . org-roam-dailies-capture-tomorrow))
  :bind-keymap
  ("C-c n d" . org-roam-dailies-map)
  :config
  (setq org-roam-database-connector 'sqlite3)
  (require 'org-roam-dailies) ;; Ensure the keymap is available
  (org-roam-db-autosync-mode))
#+end_src
** Buffers/Editing
*** Projectile
Package
- Projectile is a really nice package that makes navigating in and
  between projects much easier.
  #+begin_src emacs-lisp
;; Use coreutils ls
;;(when (string= system-type "freebsd")
;;  (setq dired-use-ls-dired t
;;        insert-directory-program "/usr/local/bin/gls"
;;        dired-listing-switches "-aBhl --group-directories-first"))
;; projectile
(use-package projectile
  :straight t
  :config
  (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/Projects/")
    (setq projectile-project-search-path '("~/Projects/")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :straight t
  :config
  (counsel-projectile-mode))
#+end_src
*** Dired
#+begin_src emacs-lisp
(setq dired-use-ls-dired t
       insert-directory-program "/usr/local/bin/gls")
(setq dired-listing-switches "-laGh1v --group-directories-first")
(setq delete-by-moving-to-trash t)

(use-package all-the-icons-dired
  :straight t
  :hook (dired-mode . all-the-icons-dired-mode)
  :config
  (setq all-the-icons-dired-monochrome nil))

(use-package dired-hide-dotfiles
  :straight t
  :hook
  (dired-mode . dired-hide-dotfiles-mode)
  :config
  (define-key dired-mode-map (kbd "C-c t") 'dired-hide-dotfiles-mode)
  )
#+end_src
*** Dired+
- Library of features to extend dired mode.
  #+begin_src emacs-lisp
    (use-package dired+
      :straight t
      :config
      (require 'dired+))
  #+end_src
*** Dynamic Expansion
- Set up hippie expand.
  #+begin_src emacs-lisp
    (setq hippie-expand-try-functions-list
          '(try-expand-dabbrev-visible
            try-expand-dabbrev
            try-expand-dabbrev-all-buffers
            try-expand-dabbrev-from-kill
            try-expand-list
            try-expand-list-all-buffers
            try-complete-file-name-partially
            try-complete-file-name
            try-expand-all-abbrevs))
(global-set-key [remap dabbrev-expand] 'hippie-expand)
  #+end_src
*** Yasnippet package
- YASnippet template system for Emacs.
  #+begin_src emacs-lisp
(straight-use-package 'yasnippet)
(yas-global-mode 1)
;; Bind `SPC' to `yas-expand' when snippet expansion available (it
;; will still call `self-insert-command' otherwise).
(define-key yas-minor-mode-map (kbd "SPC") yas-maybe-expand)
;; Bind `C-c y' to `yas-expand' ONLY.
(define-key yas-minor-mode-map (kbd "C-c y") #'yas-expand)
  #+end_src
*** Yasnippet-snippets
- This package is a collection of yasnippet snippets for many languages.
  #+begin_src emacs-lisp
    (use-package yasnippet-snippets :straight t)
  #+end_src
*** Auto-Fill mode
- Turn on auto-fill mode in text mode.
  #+begin_src emacs-lisp
    (add-hook 'text-mode-hook 'turn-on-auto-fill)
  #+end_src
*** Flycheck-aspell
#+begin_src emacs-lisp
(use-package flycheck-aspell
  :straight t
  :config
  (setq ispell-dictionary "en_GB")
  (setq ispell-program-name "aspell")
  (setq ispell-silently-savep t)
  (setq ispell-personal-dictionary "~/.aspell.en.pws")
  ;; Ensure `flycheck-aspell' is available
  (require 'flycheck-aspell)
  ;; If you want to check TeX/LaTeX/ConTeXt buffers
  (add-to-list 'flycheck-checkers 'tex-aspell-dynamic)
  ;; If you want to check Markdown/GFM buffers
  (add-to-list 'flycheck-checkers 'markdown-aspell-dynamic)
  ;; If you want to check HTML buffers
  (add-to-list 'flycheck-checkers 'html-aspell-dynamic)
  ;; If you want to check XML/SGML buffers
  (add-to-list 'flycheck-checkers 'xml-aspell-dynamic)
  ;; If you want to check Nroff/Troff/Groff buffers
  (add-to-list 'flycheck-checkers 'nroff-aspell-dynamic)
  ;; If you want to check Texinfo buffers
  (add-to-list 'flycheck-checkers 'texinfo-aspell-dynamic)
  ;; If you want to check comments and strings for C-like languages
  (add-to-list 'flycheck-checkers 'c-aspell-dynamic)
  ;; If you want to check message buffers
  (add-to-list 'flycheck-checkers 'mail-aspell-dynamic)
  )

(flycheck-aspell-define-checker "org"
  "Org" ("--add-filter" "url")
  (org-mode))
(add-to-list 'flycheck-checkers 'org-aspell-dynamic)

(advice-add #'ispell-pdict-save :after #'flycheck-maybe-recheck)
(defun flycheck-maybe-recheck (_)
  (when (bound-and-true-p flycheck-mode)
   (flycheck-buffer)))
#+end_src
*** Multiple Cursors Package
- Useful package that lets you use multiple cursors to manipulate text.
  ([[https://github.com/magnars/multiple-cursors.el][Multiple cursors website)]]
  #+begin_src emacs-lisp
    (use-package multiple-cursors :straight t)
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
  #+end_src
*** Aggressive Indent Mode
- Aggressive-indent-mode is a minor mode that keeps your code
  always indented. It reindents after every change, making it more
  reliable than electric-indent-mode. ([[https://github.com/Malabarba/aggressive-indent-mode][Aggressive Indent Mode Website)]]
  #+begin_src emacs-lisp
    (use-package aggressive-indent :straight t)
  #+end_src
*** Undo/Redo
- Define a C-z and C-S-z for undo and redo respectively.
  #+begin_src emacs-lisp
(global-set-key (kbd "C-z") 'undo-only)
(global-set-key (kbd "C-S-z") 'undo-redo)
  #+end_src
*** Popup-kill-ring Package
- Useful package for easily retrieving or yanking from the
  kill-ring history.
  #+begin_src emacs-lisp
    (straight-use-package 'popup-kill-ring)
    (global-set-key "\M-y" 'popup-kill-ring)
  #+end_src
*** Browse-kill-ring Package
- [[https://github.com/browse-kill-ring/browse-kill-ring][Browse-kill-ring Package Website]]
  #+begin_src emacs-lisp
    (use-package browse-kill-ring
      :straight t
      :config
      (require 'browse-kill-ring)
      (browse-kill-ring-default-keybindings))
  #+end_src
*** Wrap-region Package
- Emacs minor mode to wrap region with tag or punctuation.
  #+begin_src emacs-lisp
    (use-package wrap-region
      :straight   t
      :config
      (wrap-region-global-mode t)
      (wrap-region-add-wrappers
       '(("(" ")")
         ("[" "]")
         ("{" "}")
         ("<" ">")
         ("'" "'")
         ("\"" "\"")
         ("‘" "’"   "q")
         ("“" "”"   "Q")
         ("*" "*"   "b"   org-mode)                 ; bolden
         ("*" "*"   "*"   org-mode)                 ; bolden
         ("/" "/"   "i"   org-mode)                 ; italics
         ("/" "/"   "/"   org-mode)                 ; italics
         ("~" "~"   "c"   org-mode)                 ; code
         ("~" "~"   "~"   org-mode)                 ; code
         ("=" "="   "v"   org-mode)                 ; verbatim
         ("=" "="   "="   org-mode)                 ; verbatim
         ("_" "_"   "u" '(org-mode markdown-mode))  ; underline
         ("**" "**" "b"   markdown-mode)            ; bolden
         ("*" "*"   "i"   markdown-mode)            ; italics
         ("`" "`"   "c" '(markdown-mode ruby-mode)) ; code
         ("`" "'"   "c"   lisp-mode)                ; code
         ))
      :diminish wrap-region-mode)
    (add-to-list 'wrap-region-except-modes 'web-mode)
    (add-to-list 'wrap-region-except-modes 'cal-mode)
    (add-to-list 'wrap-region-except-modes 'dired-mode)
  #+end_src
*** Whitespace Package
- Emacs minor mode to visualize blank characters.
  #+begin_src emacs-lisp
    (use-package whitespace
      :straight t
      :bind ("C-c T w" . whitespace-mode)
      :init
      (setq whitespace-line-column nil
            whitespace-display-mappings '((space-mark 32 [183] [46])
                                          (newline-mark 10 [9166 10])
                                          (tab-mark 9 [9654 9] [92 9])))
      :config
      (set-face-attribute 'whitespace-space       nil :foreground "#666666" :background nil)
      (set-face-attribute 'whitespace-newline     nil :foreground "#666666" :background nil)
      (set-face-attribute 'whitespace-indentation nil :foreground "#666666" :background nil)
      :diminish whitespace-mode)
  #+end_src
*** Smart-comment Package
- Smarter commenting for emacs.
  #+begin_src emacs-lisp
     (use-package smart-comment
       :straight t
       :bind ("M-;" . smart-comment))
  #+end_src
*** Strip Whitespace on Save
- Deletes trailing whitespace.
  #+begin_src emacs-lisp
    (add-hook 'before-save-hook 'delete-trailing-whitespace)
  #+end_src
*** Flycheck Package
- Turn on flycheck.
  #+begin_src emacs-lisp
    (use-package flycheck
      :straight t
      :init
      (add-hook 'after-init-hook 'global-flycheck-mode)
      :config
      (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
  #+end_src
*** Expand Region Package
- Expand Region expands the marked region in semantic increments
  (negative prefix to reduce region).
  #+begin_src emacs-lisp
    (use-package expand-region
      :straight t
      :config
      (defun ha/expand-region (lines)
        "Prefix-oriented wrapper around Magnar's `er/expand-region'.

         Call with LINES equal to 1 (given no prefix), it expands the
         region as normal.  When LINES given a positive number, selects
         the current line and number of lines specified.  When LINES is a
         negative number, selects the current line and the previous lines
         specified.  Select the current line if the LINES prefix is zero."
        (interactive "p")
        (cond ((= lines 1)   (er/expand-region 1))
              ((< lines 0)   (ha/expand-previous-line-as-region lines))
              (t             (ha/expand-next-line-as-region (1+ lines)))))

      (defun ha/expand-next-line-as-region (lines)
        (message "lines = %d" lines)
        (beginning-of-line)
        (set-mark (point))
        (end-of-line lines))

      (defun ha/expand-previous-line-as-region (lines)
        (end-of-line)
        (set-mark (point))
        (beginning-of-line (1+ lines)))

      :bind ("C-=" . ha/expand-region))
  #+end_src
*** Hungry Delete Package
- This mode deletes all the whitespace after the cursor (or before
  it) when you use delete or backspace.
  #+begin_src emacs-lisp
    (use-package hungry-delete
      :straight t
      :config
      (global-hungry-delete-mode))
  #+end_src
*** Highlight line Mode
- This turns on highlight line mode. Making it easy to see the line
  the cursor is on.
  #+begin_src emacs-lisp
    (global-hl-line-mode t)
  #+end_src
*** Winner Mode
- Winner Mode is a global minor mode. When activated, it allows
  you to “undo” (and “redo”) changes in the window configuration
  with the key commands ‘C-c left’ and ‘C-c right’
  #+begin_src emacs-lisp
    (when (fboundp 'winner-mode)
      (winner-mode 1))
  #+end_src
*** Ace-window package
- Emacs package for selecting which window to switch to. Binds ace-window to M-o.
  #+begin_src emacs-lisp
    (use-package ace-window
      :straight t
      :init
      (progn
        (global-set-key (kbd "M-o") 'ace-window)
        (custom-set-faces)
        '(aw-leading-char face
                          ((t (:inherit ace-jump-face-foreground :height 3.0))))))
  #+end_src
*** Avy Package
- Avy is a package for jumping to visible text using a character based decision tree.
  #+begin_src emacs-lisp
    (use-package avy
      :straight t
      :config
      (avy-setup-default))
    (global-set-key (kbd "C-|") 'avy-goto-char)
    (global-set-key (kbd "C-'") 'avy-goto-char-2)
    (global-set-key (kbd "M-g f") 'avy-goto-line)
    (global-set-key (kbd "M-g w") 'avy-goto-word-1)
    (global-set-key (kbd "M-g e") 'avy-goto-word-0)
  #+end_src
*** Neotree Package
- Neotree Package is an emacs tree plugin like NerdTree for Vim.
  #+begin_src emacs-lisp
    (use-package neotree
      :straight t)
    (require 'neotree)
    (global-set-key [f8] 'neotree-toggle)
  #+end_src
*** Vimish-fold Package
- This is a package to perform text folding like in Vim.
  #+begin_src emacs-lisp
    (use-package vimish-fold
      :straight t)
    (require 'vimish-fold)
    (global-set-key (kbd "C-c v f") #'vimish-fold)
    (global-set-key (kbd "C-c v v") #'vimish-fold-delete)
    (vimish-fold-global-mode 1)
  #+end_src
*** Linum-relative Package
- Display relative line numbers in emacs.
  #+begin_src emacs-lisp
    (use-package linum-relative
      :straight t
      :config
      (defun linum-new-mode ()
        "If line numbers aren't displayed, then display them.
          Otherwise, toggle between absolute and relative numbers."
        (interactive)
        (if linum-mode
            (linum-relative-toggle)
          (linum-mode 1)))

      :bind ("s-k" . linum-new-mode))
  #+end_src
*** Smartparens Package
- Minor mode for Emacs that deals with parens pairs
  and tries to be smart about it.
  #+begin_src emacs-lisp
    (use-package smartparens
      :straight t
      :config
      (progn
        (show-smartparens-global-mode t)))

    (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
    (add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)
  #+end_src
*** Windmove
- It lets you move point from window to window using Shift and the arrow
  keys.
  #+begin_src emacs-lisp
    (when (fboundp 'windmove-default-keybindings)
      (windmove-default-keybindings))

    ;; Set wraparound
    (setq windmove-wrap-around t)
  #+end_src
** Programming
*** Company mode
- Company is a text completion framework for Emacs. The name stands for
  "complete anything".
   #+begin_src emacs-lisp
(use-package company
  :straight t
  :after lsp-mode
  :hook
  (prog-mode . company-mode)
  :bind
  (:map company-active-map
        ("<tab>" . company-complete-selection))
  (:map lsp-mode-map
        ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.7)
  )

(setq
 company-selection-wrap-around t
 company-show-numbers t
 company-require-match 'never
 company-dabbrev-downcase nil
 company-dabbrev-ignore-case t
 company-backends '(company-jedi company-nxml
                                 company-css company-capf
                                 (company-dabbrev-code company-keywords)
                                 company-files company-dabbrev company-clang)
 company-jedi-python-bin "python")

(setq company-frontends
      '(company-pseudo-tooltip-unless-just-one-frontend
        company-echo-metadata-frontend
        company-preview-frontend)
      company-auto-complete t)
(add-hook 'prog-mode-hook 'company-mode)
   #+end_src
*** Company-jedi
- Company-mode completion back-end for Python JEDI.
  #+begin_src emacs-lisp
    (use-package company-jedi
      :straight t
      :config
      (defun my/python-mode-hook ()
        (add-to-list 'company-backends 'company-jedi))

      (add-hook 'python-mode-hook 'my/python-mode-hook)
      )
  #+end_src
*** Company-box
- A Company frontend with icons.
  #+begin_src emacs-lisp
(use-package company-box
  :straight t
  :hook (company-mode . company-box-mode))
  #+end_src
*** lsp-ui
#+begin_src emacs-lisp
(use-package lsp-ui
  :straight t
  :hook
  (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))
#+end_src
*** lsp-treemacs
#+begin_src emacs-lisp
(use-package lsp-treemacs
  :straight t
  :after lsp)
#+end_src
*** lsp-ivy
#+begin_src emacs-lisp
(use-package lsp-ivy
  :straight t)
#+end_src
*** Line numbers for programming
- Display line numbers for programming modes.
  #+begin_src emacs-lisp
    (add-hook 'prog-mode-hook '(lambda () (display-line-numbers-mode 1)))
  #+end_src
*** Color-identifiers package
- Colorize identifiers for programming modes.
  #+begin_src emacs-lisp
    (use-package color-identifiers-mode
      :straight t
      :init
      (add-hook 'prog-mode-hook 'color-identifiers-mode))
  #+end_src
*** GO Programming
- Go-mode package install and configuration.
  #+begin_src emacs-lisp
    (use-package go-mode :straight t)
    (defun my-go-mode-hook ()
      ;;Use goimports instead of go-fmt
      (setq gofmt-command "goimports")
      ;; Call Gofmt before saving
      (add-hook 'before-save-hook 'gofmt-before-save)
      ;; Customize compile command to run go build
      (if (not (string-match "go" compile-command))
          (set (make-local-variable 'compile-command)
               "go build -v && go test -v && go vet"))
      ;; Godef jump key binding
      (local-set-key (kbd "M-.") 'godef-jump)
      (local-set-key (kbd "M-*") 'pop-tag-mark))

    (add-hook 'go-mode-hook 'my-go-mode-hook)

    (defun auto-complete-for-go ()
      (auto-complete-mode 1))
    (add-hook 'go-mode-hook 'auto-complete-for-go)

    (use-package go-eldoc
      :straight t
      :config
      (add-hook 'go-mode-hook 'go-eldoc-setup))

    (use-package godoctor
      :straight t)

    (use-package go-guru
      :straight t)
  #+end_src
*** Java Programming
- lsp-java
  #+begin_src emacs-lisp
(use-package lsp-java
  :straight t
  :config
  (require 'lsp-java)
  (add-hook 'java-mode-hook #'lsp)
  (add-to-list 'lsp-enabled-clients 'jdtls))
  #+end_src
- The Java Development Environment for Emacs.
  #+begin_src emacs-lisp
;; (use-package jdee
;;   :straight t)
;; (load "jdee")
;; (custom-set-variables '(jdee-server-dir "~/.emacs.d/straight/repos/jdee-server"))
  #+end_src
*** Python Programming
- LSP jedi. Using LSP mode with jedi server.
  #+begin_src emacs-lisp
(use-package lsp-jedi
  :straight t
  :config
  (with-eval-after-load "lsp-mode"
    (add-to-list 'lsp-disabled-clients 'pyls)
    (add-to-list 'lsp-enabled-clients 'jedi)))
(add-hook 'python-mode-hook 'lsp)
;;(setq python-shell-interpreter "/usr/local/bin/python3.7")
  #+end_src
- Elpy package. Elpy is an Emacs package to bring powerful Python editing to
  Emacs. It combines and configures a number of other packages, both
  written  in Emacs Lisp as well as Python. Temporarily stopped using
  this config for python because I moved to lsp-mode.
  #+begin_src emacs-lisp
    ;; (use-package elpy
    ;;   :straight t
    ;;   :config
    ;;   (when (require 'elpy nil t)
    ;;     (elpy-enable))
    ;;   (setq elpy-rpc-backend "jedi"))
    ;; (setq elpy-rpc-python-command "python3.7")
    ;; (setq python-shell-interpreter "/usr/local/bin/python3.7")
  #+end_src
- py-autopep8 package to format python code on save.
  #+begin_src emacs-lisp
    (use-package py-autopep8
      :straight t)
    (require 'py-autopep8)
    (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
  #+end_src
*** JavaScript Programming
- JavaScript indentation should be set to two spaces. And handling weird
  javascript extensions.
  #+begin_src emacs-lisp
  (setq js-indent-level 2)
  (add-to-list 'auto-mode-alist '("\\.es6\\'" . js2-mode))
  #+end_src
- js2-mode install and setup.
  #+begin_src emacs-lisp
    (use-package js2-mode
      :straight t
      :init
      (setq js-basic-indent 2)
      (setq-default js2-basic-indent 2
                    js2-basic-offset 2
                    js2-auto-indent-p t
                    js2-cleanup-whitespace t
                    js2-enter-indents-newline t
                    js2-indent-on-enter-key t
                    js2-global-externs (list "window" "module" "require" "buster" "sinon" "assert" "refute" "setTimeout" "clearTimeout" "setInterval" "clearInterval" "location" "__dirname" "console" "JSON" "jQuery" "$"))

      (add-hook 'js2-mode-hook
                (lambda ()
                  (push '("function" . ?ƒ) prettify-symbols-alist)))

      (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode)))
  #+end_src
- Flycheck with javascript-eslint in js2-mode.
    #+begin_src emacs-lisp
      (add-hook 'js2-mode-hook
                (lambda () (flycheck-select-checker "javascript-eslint")))
    #+end_src
- js-comint install and configuration.
  #+begin_src emacs-lisp
    (use-package js-comint
      :straight t)
    (require 'js-comint)

    (defun inferior-js-mode-hook-setup ()
      (add-hook 'comint-output-filter-functions 'js-comint-process-output))
    (add-hook 'inferior-js-mode-hook 'inferior-js-mode-hook-setup t)

    ;; You can also customize `js-comint-drop-regexp' to filter output
    (when (eq system-type 'gnu/linux)
      (setq inferior-js-program-command "nodejs")
      (setq inferior-js-program-arguments '("--interactive")))
    (when (eq system-type 'berkeley-unix)
      (setq inferior-js-program-command "node")
      (setq inferior-js-program-arguments '("--interactive")))

    (add-hook 'js2-mode-hook
              (lambda ()
                (local-set-key (kbd "C-x C-e") 'js-send-last-sexp)
                (local-set-key (kbd "C-M-x") 'js-send-last-sexp-and-go)
                (local-set-key (kbd "C-c b") 'js-send-buffer)
                (local-set-key (kbd "C-c C-b") 'js-send-buffer-and-go)
                (local-set-key (kbd "C-c l") 'js-load-file-and-go)))
  #+end_src
- Octave programming.
  #+begin_src emacs-lisp
    (setq auto-mode-alist
          (cons '("\\.m$" . octave-mode) auto-mode-alist))

    (setq auto-mode-alist
          (cons '("\\.m$" . octave-mode) auto-mode-alist))

    (add-hook 'octave-mode-hook
              (lambda ()
                (abbrev-mode 1)
                (auto-fill-mode 1)
                (if (eq window-system 'x)
                    (font-lock-mode 1))))
  #+end_src
- HTMLIZE package install.
  #+begin_src emacs-lisp
    (use-package htmlize
      :straight t)
  #+end_src
*** C++/C Programming
- LSP mode. Trying lsp-mode out. I used to use auto-complete for this.
  #+begin_src emacs-lisp
(use-package lsp-mode :straight t
  :commands (lsp lsp-deferred)
  :init
  (require 'lsp)
  (add-to-list 'lsp-enabled-clients 'clangd)
  (add-hook 'c-mode-hook 'lsp)
  (add-hook 'cpp-mode-hook 'lsp)
  :config
  (define-key lsp-mode-map (kbd "s-h") lsp-command-map)
  (lsp-enable-which-key-integration t))
(use-package dap-mode :straight t)

(which-key-mode)
(add-hook 'c-mode-hook 'lsp)
(add-hook 'c++-mode-hook 'lsp)

(setq gc-cons-threshold (* 100 1024 1024)
      read-process-output-max (* 1024 1024)
      treemacs-space-between-root-nodes nil
      lsp-idle-delay 0.1 ;; clangd is fast
      ;; be more ide-ish
      lsp-headerline-breadcrumb-enable t)

(with-eval-after-load 'lsp-mode
  (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
  (require 'dap-cpptools)
  (yas-global-mode))

  #+end_src
- ggtags package for code navigation.
  #+begin_src emacs-lisp
    (use-package ggtags
      :straight t
      :config
      (add-hook 'c-mode-common-hook
                (lambda ()
                  (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                    (ggtags-mode 1))))
      )
(setq lsp-clients-clangd-executable "/usr/local/bin/clangd13")
  #+end_src
*** Web Programming
- Web-mode package install and configuration.
  #+begin_src emacs-lisp
(use-package web-mode
  :straight t)
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(setq web-mode-enable-auto-pairing t)
(setq web-mode-enable-css-colorization t)

;; Set Indentation
(setq web-mode-markup-indent-offset 2)
(setq web-mode-css-indent-offset 2)
(setq web-mode-code-indent-offset 2)

;; For Emmet to switch between html and css properly in the same document,
;; this hook is added.
(add-hook 'web-mode-before-auto-complete-hooks
          '(lambda ()
             (let ((web-mode-cur-language
                    (web-mode-language-at-pos)))
               (if (string= web-mode-cur-language "php")
                   (yas-activate-extra-mode 'php-mode)
                 (yas-deactivate-extra-mode 'php-mode))
               (if (string= web-mode-cur-language "css")
                   (setq emmet-use-css-transform t)
                 (setq emmet-use-css-transform nil)))))
  #+end_src
- Emmet mode install and configuration.
  #+begin_src emacs-lisp
    (use-package emmet-mode
      :straight t
      :config
      (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
      (add-hook 'web-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
      (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
      )
  #+end_src
*** Dumb Jump
#+begin_src emacs-lisp
  (use-package dumb-jump
    :straight t
    :config
    (dumb-jump-mode))
#+end_src
*** Emacs lisp
- eldoc is a nice helper to avoid looking up function signatures in
  function documentation.
#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
(add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)

;; set eldoc default delay
(setq eldoc-idle-delay 0.1
      eldoc-echo-area-use-multiline-p nil)
#+end_src
*** TypeScript
#+begin_src emacs-lisp
(use-package typescript-mode
  :straight t
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (add-to-list 'lsp-enabled-clients 'ts-ls)
  (setq typescript-indent-level 2))
#+end_src
*** CSS
- Indentation could be a bit more narrow.
#+begin_src emacs-lisp
(setq css-indent-offset 2)
#+end_src
*** Info
- Make copying use the lispy syntax by default and with a normal syntax
  argument copy the HTML link.
  #+begin_src emacs-lisp
(defun my-info-copy-current-node-name (arg)
  "Copy the lispy form of the current node.
With a prefix argument, copy the link to the online manual
instead."
  (interactive "P")
  (let* ((manual (file-name-sans-extension
                  (file-name-nondirectory Info-current-file)))
         (node Info-current-node)
         (link (if (not arg)
                   (format "(info \"(%s) %s\")" manual node)
                 ;; NOTE this will only work with emacs-related nodes...
                 (format "https://www.gnu.org/software/emacs/manual/html_node/%s/%s.html"
                         manual (if (string= node "Top")
                                    "index"
                                  (replace-regexp-in-string " " "-" node))))))
    (kill-new link)
    (message link)))

(with-eval-after-load 'info
  (define-key Info-mode-map (kbd "c") 'my-info-copy-current-node-name))
  #+end_src
*** Flymake
#+begin_src emacs-lisp
;; Enabled inline static analysis
(add-hook 'prog-mode-hook #'flymake-mode)
#+end_src
** Git
*** Magit
#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :init
    (progn
      (bind-key "C-x g" 'magit-status)
      ))
#+end_src
*** Forge
#+begin_src emacs-lisp
;;(use-package forge
;;  :straight t
;;  :after magit)
#+end_src
*** Git-gutter
***
#+begin_src emacs-lisp
  (use-package git-gutter
    :straight t
    :init
    (global-git-gutter-mode +1))

  (custom-set-variables
   '(git-gutter:update-interval 2))
#+end_src
*** Git-timemachine
#+begin_src emacs-lisp
  (straight-use-package 'git-timemachine
    :straight t
    )
#+end_src
*** Git-gutter-hydra
#+begin_src emacs-lisp
        (defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
				  :hint nil)
	"
      Git gutter:
	_j_: next hunk        _s_tage hunk     _q_uit
	_k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
	^ ^                   _p_opup hunk
	_h_: first hunk
	_l_: last hunk        set start _R_evision
      "
	("j" git-gutter:next-hunk)
	("k" git-gutter:previous-hunk)
	("h" (progn (goto-char (point-min))
		    (git-gutter:next-hunk 1)))
	("l" (progn (goto-char (point-min))
		    (git-gutter:previous-hunk 1)))
	("s" git-gutter:stage-hunk)
	("r" git-gutter:revert-hunk)
	("p" git-gutter:popup-hunk)
	("R" git-gutter:set-start-revision)
	("q" nil :color blue)
	("Q" (progn (git-gutter-mode -1)
		    ;; git-gutter-fringe doesn't seem to
		    ;; clear the markup right away
		    (sit-for 0.1)
		    (git-gutter:clear))
	     :color blue))
#+end_src
** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :straight t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+end_src
** Latex
*** AUCTeX/CDLatex
- Set up AUCTeX for Emacs.
  #+begin_src emacs-lisp
   ;; AucTeX settings - almost no changes
(use-package tex-site
  :ensure auctex)

(use-package latex
  :ensure auctex
  :hook ((LaTeX-mode . prettify-symbols-mode))
  :bind (:map LaTeX-mode-map
         ("C-S-e" . latex-math-from-calc))
  :config
  ;; Format math as a Latex string with Calc
  (defun latex-math-from-calc ()
    "Evaluate `calc' on the contents of line at point."
    (interactive)
    (cond ((region-active-p)
           (let* ((beg (region-beginning))
                  (end (region-end))
                  (string (buffer-substring-no-properties beg end)))
             (kill-region beg end)
             (insert (calc-eval `(,string calc-language latex
                                          calc-prefer-frac t
                                          calc-angle-mode rad)))))
          (t (let ((l (thing-at-point 'line)))
               (end-of-line 1) (kill-line 0)
               (insert (calc-eval `(,l
                                    calc-language latex
                                    calc-prefer-frac t
                                    calc-angle-mode rad)))))))
 (setq TeX-auto-save t)
      (setq TeX-parse-self t)
      (setq-default TeX-master nil)
      (add-hook 'LaTeX-mode-hook
                (lambda ()
                  (rainbow-delimiters-mode)
                  (company-mode)
                  (smartparens-mode)
                  (turn-on-reftex)
                  (setq reftex-plug-into-AUCTeX t)
                  (reftex-isearch-minor-mode)
                  (setq TeX-PDF-mode t)
                  (setq TeX-source-correlate-method 'synctex)
                  (setq TeX-source-correlate-start-server t)))

      ;; Update PDF buffers after successful LaTeX runs
      (add-hook 'TeX-after-TeX-LaTeX-command-finished-hook
                #'TeX-revert-document-buffer)

      ;; to use pdfview with auctex
      (add-hook 'LaTeX-mode-hook 'pdf-tools-install)

      ;; to use pdfview with auctex
      (setq TeX-view-program-selection '((output-pdf "pdf-tools"))
            TeX-source-correlate-start-server t)
      (setq TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view")
  )))



;; CDLatex settings
(use-package cdlatex
  :ensure t
  :hook (LaTeX-mode . turn-on-cdlatex)
  :bind (:map cdlatex-mode-map
              ("<tab>" . cdlatex-tab)))

;; Yasnippet settings
(use-package yasnippet
  :ensure t
  :hook ((LaTeX-mode . yas-minor-mode)
         (post-self-insert . my/yas-try-expanding-auto-snippets))
  :config
  (use-package warnings
    :config
    (cl-pushnew '(yasnippet backquote-change)
                warning-suppress-types
                :test 'equal))

  (setq yas-triggers-in-field t)

  ;; Function that tries to autoexpand YaSnippets
  ;; The double quoting is NOT a typo!
  (defun my/yas-try-expanding-auto-snippets ()
    (when (and (boundp 'yas-minor-mode) yas-minor-mode)
      (let ((yas-buffer-local-condition ''(require-snippet-condition . auto)))
        (yas-expand)))))

;; CDLatex integration with YaSnippet: Allow cdlatex tab to work inside Yas
;; fields
(use-package cdlatex
  :hook ((cdlatex-tab . yas-expand)
         (cdlatex-tab . cdlatex-in-yas-field))
  :config
  (use-package yasnippet
    :bind (:map yas-keymap
           ("<tab>" . yas-next-field-or-cdlatex)
           ("TAB" . yas-next-field-or-cdlatex))
    :config
    (defun cdlatex-in-yas-field ()
      ;; Check if we're at the end of the Yas field
      (when-let* ((_ (overlayp yas--active-field-overlay))
                  (end (overlay-end yas--active-field-overlay)))
        (if (>= (point) end)
            ;; Call yas-next-field if cdlatex can't expand here
            (let ((s (thing-at-point 'sexp)))
              (unless (and s (assoc (substring-no-properties s)
                                    cdlatex-command-alist-comb))
                (yas-next-field-or-maybe-expand)
                t))
          ;; otherwise expand and jump to the correct location
          (let (cdlatex-tab-hook minp)
            (setq minp
                  (min (save-excursion (cdlatex-tab)
                                       (point))
                       (overlay-end yas--active-field-overlay)))
            (goto-char minp) t))))

    (defun yas-next-field-or-cdlatex nil
      (interactive)
      "Jump to the next Yas field correctly with cdlatex active."
      (if
          (or (bound-and-true-p cdlatex-mode)
              (bound-and-true-p org-cdlatex-mode))
          (cdlatex-tab)
        (yas-next-field-or-maybe-expand)))))

;; Array/tabular input with org-tables and cdlatex
(use-package org-table
  :after cdlatex
  :bind (:map orgtbl-mode-map
              ("<tab>" . lazytab-org-table-next-field-maybe)
              ("TAB" . lazytab-org-table-next-field-maybe))
  :init
  (add-hook 'cdlatex-tab-hook 'lazytab-cdlatex-or-orgtbl-next-field 90)
  ;; Tabular environments using cdlatex
  (add-to-list 'cdlatex-command-alist '("smat" "Insert smallmatrix env"
                                       "\\left( \\begin{smallmatrix} ? \\end{smallmatrix} \\right)"
                                       lazytab-position-cursor-and-edit
                                       nil nil t))
  (add-to-list 'cdlatex-command-alist '("bmat" "Insert bmatrix env"
                                       "\\begin{bmatrix} ? \\end{bmatrix}"
                                       lazytab-position-cursor-and-edit
                                       nil nil t))
  (add-to-list 'cdlatex-command-alist '("pmat" "Insert pmatrix env"
                                       "\\begin{pmatrix} ? \\end{pmatrix}"
                                       lazytab-position-cursor-and-edit
                                       nil nil t))
  (add-to-list 'cdlatex-command-alist '("tbl" "Insert table"
                                        "\\begin{table}\n\\centering ? \\caption{}\n\\end{table}\n"
                                       lazytab-position-cursor-and-edit
                                       nil t nil))
  :config
  ;; Tab handling in org tables
  (defun lazytab-position-cursor-and-edit ()
    ;; (if (search-backward "\?" (- (point) 100) t)
    ;;     (delete-char 1))
    (cdlatex-position-cursor)
    (lazytab-orgtbl-edit))

  (defun lazytab-orgtbl-edit ()
    (advice-add 'orgtbl-ctrl-c-ctrl-c :after #'lazytab-orgtbl-replace)
    (orgtbl-mode 1)
    (open-line 1)
    (insert "\n|"))

  (defun lazytab-orgtbl-replace (_)
    (interactive "P")
    (unless (org-at-table-p) (user-error "Not at a table"))
    (let* ((table (org-table-to-lisp))
           params
           (replacement-table
            (if (texmathp)
                (lazytab-orgtbl-to-amsmath table params)
              (orgtbl-to-latex table params))))
      (kill-region (org-table-begin) (org-table-end))
      (open-line 1)
      (push-mark)
      (insert replacement-table)
      (align-regexp (region-beginning) (region-end) "\\([:space:]*\\)& ")
      (orgtbl-mode -1)
      (advice-remove 'orgtbl-ctrl-c-ctrl-c #'lazytab-orgtbl-replace)))

  (defun lazytab-orgtbl-to-amsmath (table params)
    (orgtbl-to-generic
     table
     (org-combine-plists
      '(:splice t
                :lstart ""
                :lend " \\\\"
                :sep " & "
                :hline nil
                :llend "")
      params)))

  (defun lazytab-cdlatex-or-orgtbl-next-field ()
    (when (and (bound-and-true-p orgtbl-mode)
               (org-table-p)
               (looking-at "[[:space:]]*\\(?:|\\|$\\)")
               (let ((s (thing-at-point 'sexp)))
                 (not (and s (assoc s cdlatex-command-alist-comb)))))
      (call-interactively #'org-table-next-field)
      t))

  (defun lazytab-org-table-next-field-maybe ()
    (interactive)
    (if (bound-and-true-p cdlatex-mode)
        (cdlatex-tab)
      (org-table-next-field))))
  #+end_src
*** RefTeX
- Setup reftex.
  #+begin_src emacs-lisp
    (use-package reftex
      :straight t
      :defer t
      :config
      (setq reftex-cite-prompt-optional-args t))
  #+end_src
*** Add Acronyms in easily in auctex
- Source of this function comes from the following web page:
https://florian.adamsky.it/2018/03/09/emacs-add-acronyms.html
#+BEGIN_SRC emacs-lisp
  (defun fa/add-latex-acronym (region-beg region-end)
    "This function reads the written out form of an acronym via the
  minibuffer and adds it to the acronym list in a latex
  document. Addtionally, it sorts all acronyms in the list."
    (interactive "r")
    (save-excursion
      (let ((acronym
             (if (region-active-p)
                 (buffer-substring region-beg region-end)
               (read-from-minibuffer "Acronym: ")))
            (full-name (read-from-minibuffer "Full Name: ")))
        (beginning-of-buffer)
        (if (search-forward "\\begin{acronym}" nil t)
            (progn
              (deactivate-mark)
              (open-line 1)
              (forward-line 1)
              (insert (concat "  \\acro{" acronym "}{" full-name "}"))
              (beginning-of-line)
              (sort-lines nil (point) (search-forward "\\end{acronym}" nil nil)))
          (user-error "No acronym environment found")))))
#+END_SRC
** GNUS and gmail
- Configuration to use GNUS with gmail.
  #+begin_src emacs-lisp
    (setq user-mail-address "transitive@gmail.com")
    (setq user-full-name "Robert Cina")

    (setq gnus-select-method
          '(nnimap "gmail"
                   (nnimap-address "imap.gmail.com")
                   (nnimap-server-port 993)
                   (nnimap-stream ssl)))

    (setq message-send-mail-function 'smtpmail-send-it
          smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
          smtpmail-auth-credentials '(("smtp.gmail.com" 587
                                       "user@gmail.com" nil))
          smtpmail-default-smtp-server "smtp.gmail.com"
          smtpmail-smtp-server "smtp.gmail.com"
          smtpmail-smtp-service 587
          gnus-ignored-newsgroups "^to\\.\\|^[0-9. ]+\\( \\|$\\)\\|^[\"]\"[#'()]")
  #+end_src
** Elfeed
- An Emacs web feeds client.  The configuration below comes from Mike
  Zamansky [[http://cestlaz.github.io/posts/using-emacs-29%2520elfeed/][here]].
  #+begin_src emacs-lisp
    (defhydra hydra-elfeed ()
      "filter"
      ("l" (elfeed-search-set-filter "@6-month-ago +lobsters") "lobsters")
      ("m" (elfeed-search-set-filter "@6-month-ago +Math") "Math")
      ("c" (elfeed-search-set-filter "@6-months-ago +cs") "cs")
      ("e" (elfeed-search-set-filter "@6-months-ago +emacs") "emacs")
      ("B" (elfeed-search-set-filter "@6-months-ago +BSD") "BSD")
      ("p" (elfeed-search-set-filter "@6-months-ago +programming") "programming")
      ("*" (elfeed-search-set-filter "@6-months-ago +star") "Starred")
      ("M" elfeed-toggle-star "Mark")
      ("A" (elfeed-search-set-filter "@6-months-ago") "All")
      ("T" (elfeed-search-set-filter "@1-day-ago") "Today")
      ("Q" bjm/elfeed-save-db-and-bury "Quit Elfeed" :color blue)
      ("q" nil "quit" :color blue)
      )

    (use-package elfeed
      :straight t
      :bind (:map elfeed-search-mode-map
                  ("q" . bjm/elfeed-save-db-and-bury)
                  ("Q" . bjm/elfeed-save-db-and-bury)
                  ("m" . elfeed-toggle-star)
                  ("M" . elfeed-toggle-star)
                  ("j" . hydra-elfeed/body)
                  ("J" . hydra-elfeed/body)
                  )
      )

(use-package elfeed-goodies
  :straight t
  :config
  (elfeed-goodies/setup))


    (use-package elfeed-org
      :straight t
      :config
      (elfeed-org)
      (setq rmh-elfeed-org-files (list "~/elfeed/elfeed.org")))

    (setq elfeed-db-directory "~/elfeed/elfeeddb")


    (defun elfeed-mark-all-as-read ()
      (interactive)
      (mark-whole-buffer)
      (elfeed-search-untag-all-unread))


    ;;functions to support syncing .elfeed between machines
    ;;makes sure elfeed reads index from disk before launching
    (defun bjm/elfeed-load-db-and-open ()
      "Wrapper to load the elfeed db from disk before opening"
      (interactive)
      (elfeed-db-load)
      (elfeed)
      (elfeed-search-update--force))

    ;;write to disk when quiting
    (defun bjm/elfeed-save-db-and-bury ()
      "Wrapper to save the elfeed db to disk before burying buffer"
      (interactive)
      (elfeed-db-save)
      (quit-window))



    (defalias 'elfeed-toggle-star
      (elfeed-expose #'elfeed-search-toggle-all 'star))
  #+end_src
** Blogging
*** ox-hugo
#+begin_src emacs-lisp
  (use-package ox-hugo
    :straight t            ;Auto-install the package from Melpa (optional)
    :after ox)
#+end_src

*** Org-noter
#+begin_src emacs-lisp
(straight-use-package 'org-noter)
#+end_src
** Terminals
*** term-mode
#+begin_src emacs-lisp
(use-package term
  :straight t
  :config
  (setq explicit-shell-file-name "zsh")
  ;;(setq explicit-zsh-args '())
  ;;(setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
  )
#+end_src
*** For better color support
#+begin_src emacs-lisp
(use-package eterm-256color
  :straight t
  :hook
  (add-hook 'term-mode-hook #'eterm-256color-mode)
  )
#+end_src
*** vterm
#+begin_src emacs-lisp
(use-package vterm
  :straight t
  :commands vterm
  :config
  (setq vterm-max-scrollback 10000))
#+end_src
*** Eshell
#+begin_src emacs-lisp
(defun efs/configure-shell ()
  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; Truncate Buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  (setq eshell-history-size 10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t)
  )

(use-package eshell-git-prompt
  :straight t)

(use-package eshell
  :straight t
  :hook (eshell-first-time-mode . efs/configure-shell)
  :config
  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("htop" "zsh" "vim")))
  (eshell-git-prompt-use-theme 'powerline))
#+end_src
** Font
#+begin_src emacs-lisp
(set-face-attribute 'fixed-pitch nil
                    :font "JetBrains Mono"
                    :weight 'light
                    :height 120)
(set-face-attribute 'default nil
                    :font "JetBrains Mono"
                    :weight 'light
                    :height 120)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil
                    ;; :font "Cantarell"
                    :font "Iosevka Light"
                    :height 120
                    :weight 'light)
#+end_src
